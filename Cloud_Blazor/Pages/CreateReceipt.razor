<!-- CreateReceipt.razor -->
@page "/createReceipt"
@inject IPrintJobService PrintJobService
@inject IReceiptService ReceiptService
@inject NavigationManager NavigationManager

<div class="max-w-4xl mx-auto">
    <h1 class="text-4xl text-white text-center font-extrabold drop-shadow-md mb-16">Create Receipt</h1>

    <ReturnButton NavigateTo="/" />
</div>

<section class="py-8">

    <div class="max-w-4xl mx-auto bg-white p-8 shadow-md rounded-md md:flex md:flex-wrap">

        <!-- CompanyInfo -->
        <div>
            <h2 class="text-2xl font-semibold mb-4 w-full">Företagsinformation</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 w-full">
                <div class="mb-4">
                    <label class="text-gray-700">Logotyp</label>
                    <!-- lägg till logga senare -->
                    <div class="border p-2 w-full bg-gray-200">Placeholder for Logo Upload</div>
                </div>
                <div class="mb-4">
                    <label class="text-gray-700">Företagsnamn</label>
                    <select class="border p-2 w-full" @bind-value="@SelectedCompanyName" @onchange="HandleCompanyNameChange" @bind-value:event="oninput">
                        <option value="Default">---</option>
                        <option value="Valei AB">Valei AB</option>
                        <option value="Voady AB">Voady AB</option>
                        <option value="Kaddio AB">Kaddio AB</option>
                        <option value="Bokadirekt AB">Bokadirekt AB</option>

                        <!-- Add more options if needed -->
                    </select>

                </div>
                <div class="mb-4">
                    <label class="text-gray-700">Adress</label>
                    <select class="border p-2 w-full" @bind="SelectedAddress">
                        <option value="Default">---</option>
                        <option value="Olaigatan 17 A, 703 61 Örebro">Olaigatan 17 A, 703 61 Örebro</option>
                        <!-- Lägg till fler options om du vill -->
                    </select>
                </div>
                <div class="mb-4">
                    <label class="text-gray-700">Org-nr</label>
                    <select class="border p-2 w-full" @bind="SelectedOrgNr">
                        <option value="Default">---</option>
                        <option value="559037-2164">559037-2164</option>
                        <!-- Lägg till fler options om du vill -->
                    </select>
                </div>
                <div class="mb-4">
                    <label class="text-gray-700">Telefon</label>
                    <select class="border p-2 w-full" @bind="SelectedPhoneNumber">
                        <option value="Default">---</option>
                        <option value="019 300 100">019 300 100</option>
                    </select>
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 w-full">
                <div class="mb-4">
                    <label class="text-gray-700">Kassa</label>
                    <select class="border p-2 w-full">
                        <option value="kassa1">Kassa 1</option>
                        <option value="kassa2">Kassa 2</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="text-gray-700">Säljare</label>
                    <select class="border p-2 w-full" @bind="@SelectedSeller" @onchange="HandleSellerChange" @bind:event="oninput">
                        <option value="defaultseller">---</option>
                        <option value="Oskar">Oskar</option>
                        <option value="Linus">Linus</option>
                        <option value="Erick">Erick</option>
                    </select>
                </div>
                <h2 class="text-2xl font-semibold mb-4 w-full">Kvittorader</h2>
            </div>
        </div>
        <!-- Products -->
        <div class="col-span-2">
     
            <!-- Product List -->
            <div class="col-span-2">
                @if (products.Any())
                {
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                        <div>
                            <label class="text-gray-700">Artikelnummer</label>
                        </div>
                        <div>
                            <label class="text-gray-700">Produktbeskrivning</label>
                        </div>
                        <div>
                            <label class="text-gray-700">Antal</label>
                        </div>
                        <div>
                            <label class="text-gray-700">Pris</label>
                        </div>
                    </div>
                }

                <!-- Product List -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                    @foreach (var product in products)
                    {
                        <div>
                            <input class="border p-2 w-full" type="text" @bind="product.Artikelnummer" />
                        </div>
                        <div>
                            <input class="border p-2 w-full" type="text" @bind="product.Produktbeskrivning" />
                        </div>
                        <div>
                            <input class="border p-2 w-full" type="number" @bind="product.Antal" />
                        </div>
                        <div>
                            <input class="border p-2 w-full" type="text" @bind="product.Pris" @onblur="UpdateTotalAmount" />
                        </div>
                    }
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="AddProduct">
                        Add Product
                    </button>
                </div>
            </div>

            <!-- Money -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 w-full">
                <div class="my-4">
                    <label class="text-gray-700">Totalbelopp</label>
                    <input class="border p-2 w-full" type="text" @bind="totalAmount" readonly /> SEK
                </div>
                <div class="my-4">
                    <label class="text-gray-700">Moms</label>
                    <input class="border p-2 w-full" type="text" @bind="tax" readonly /> SEK
                </div>
            </div>

            <!-- Betalsätt -->
            <h2 class="text-2xl font-semibold mb-4 w-full">Betalsätt</h2>
            <div class="grid grid-cols-2 gap-4 mb-4 w-full">
                @foreach (var paymentMethod in paymentMethods)
                {
                    <div class="flex items-center">
                        <input type="checkbox" id="@paymentMethod.Id" class="mr-2" @bind="paymentMethod.Selected" />
                        <label for="@paymentMethod.Id">@paymentMethod.Name</label>
                    </div>
                }
            </div>

            <!-- Footer -->
            <h2 class="text-2xl font-semibold mb-4 w-full">Footer</h2>
            <div class="mb-4 w-full">
                <label class="text-gray-700">Optional styling area for text and/or images</label>
                <textarea class="border p-2 w-full" @bind="footerText"></textarea>
            </div>

            <!-- Submit Button -->
            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="SubmitForm">
                Submit
            </button>
        </div>
    </div>
</section>


@code {
    private string totalAmount;
    private string tax;
    private string footerText;

    // Properties bound by CompanyInfo component
    private string SelectedCompanyName { get; set; }
    private string SelectedSeller { get; set; }
    private string SelectedAddress { get; set; }
    private string SelectedOrgNr { get; set; }
    private string SelectedPhoneNumber { get; set; }

    // ... (rest of your existing code)

    private void HandleCompanyNameChange(ChangeEventArgs e)
    {
        SelectedCompanyName = e.Value?.ToString();
        Console.WriteLine($"Selected Company Name: {SelectedCompanyName}");

        if (SelectedCompanyName == "Valei AB")
        {
            SelectedAddress = "Olaigatan 17 A, 703 61 Örebro";
            SelectedOrgNr = "559037-2164";
            SelectedPhoneNumber = "019 300 100";

            StateHasChanged();
        }
        else
        {
            SelectedAddress = string.Empty;
            SelectedOrgNr = string.Empty;
            SelectedPhoneNumber = string.Empty;
            StateHasChanged();
        }
    }

    private void HandleSellerChange(ChangeEventArgs e)
    {
        SelectedSeller = e.Value?.ToString();
        Console.WriteLine($"Selected Seller: {SelectedSeller}");
        StateHasChanged();
    }
    private async Task UpdateSelectedValuesAsync()
    {
        // Simulate an asynchronous operation, such as fetching data from a service
        // Replace this with your actual logic
        await Task.Delay(1000);

        // Update SelectedCompanyName and SelectedSeller based on the result
        SelectedCompanyName = "New Company Name";
        SelectedSeller = "New Seller";

        // After updating properties, trigger a re-render of the component
        StateHasChanged();
    }

    // List of Products
    List<ProductModel> products = new List<ProductModel>();

    // List of Payment Methods
    List<PaymentMethodModel> paymentMethods = new List<PaymentMethodModel>
    {
        new PaymentMethodModel { Id = 1, Name = "Kort", Selected = false },
        new PaymentMethodModel { Id = 2, Name = "Faktura", Selected = false },
        new PaymentMethodModel { Id = 3, Name = "Kontant", Selected = false },
        new PaymentMethodModel { Id = 4, Name = "Presentkort", Selected = false },
    };

    // Method to add a new product to the list
    private void AddProduct()
    {
        products.Add(new ProductModel());
        CalculateTotalAmount();
    }

    // Method to remove a product from the list
    private void RemoveProduct(ProductModel product)
    {
        products.Remove(product);
        CalculateTotalAmount();
    }

    // Method to update the total amount when typing in the price
    private void UpdateTotalAmount(FocusEventArgs e)
    {
        CalculateTotalAmount();
    }

    // Method to calculate the total amount
    private void CalculateTotalAmount()
    {
        decimal total = 0;

        foreach (var product in products)
        {
            total += product.Pris * product.Antal;
        }

        totalAmount = total.ToString("");
        tax = (total * 0.25m).ToString("");
    }

    private async Task SubmitForm()
    {
        // Get the current date and time
        DateTime currentDateTime = DateTime.Now;

        // Create a receipt object with the selected information
        PrintJob printjob = new PrintJob
            {
                Content = 
                          "<div style='text-align: center;'>\n" + // Center-align the content
                          "----- Företagsinformation -----\n" +
                          $"Företagsnamn: {SelectedCompanyName}\n" +
                          $"Adress: {SelectedAddress}\n" +
                          $"Org-nr: {SelectedOrgNr}\n" +
                          $"Telefon: {SelectedPhoneNumber}\n" +
                          "</div>\n\n" +
                          $"----- Seller Information -----\n" +
                          $"----- Date/Time: {currentDateTime.ToString("yyyy-MM-dd HH:mm:ss")} -----\n" +
                          $"Seller Name: {SelectedSeller}\n\n" +
                          $"----- Products -----\n",
                // Add other properties as needed
            };

        // Add product details to the content
        foreach (var product in products)
        {
            printjob.Content += $"\nArtikelnummer: {product.Artikelnummer}\nProduktbeskrivning: {product.Produktbeskrivning}\nPris: {product.Pris} SEK\t\t Antal: {product.Antal}";
        }

        // Add the selected payment methods
        printjob.Content += $"\n\n----- Selected Payment Methods -----\n";
        foreach (var paymentMethod in paymentMethods.Where(pm => pm.Selected))
        {
            printjob.Content += $"{paymentMethod.Name}\n";
        }

        // Add the total amount at the bottom
        printjob.Content += $"\n\nTotalBelopp: {totalAmount} SEK";
        
        Receipt receipt = new Receipt
            {
                Name = SelectedSeller,
                Company = SelectedCompanyName,
                // Add other properties as needed
            };

        // Call the CreateReceipt method from the service
        await PrintJobService.CreatePrintJob(printjob);
        await ReceiptService.CreateReceipt(receipt);


    }
    // Method to submit the form
    /*private async Task SubmitForm()
    {
        // Create a receipt object with the selected information
        Receipt receipt = new Receipt
            {
                Name = SelectedSeller,
                Company = SelectedCompanyName,
                // Add other properties as needed
            };

        // Call the CreateReceipt method from the service
        await ReceiptService.CreateReceipt(receipt);
    }
    */
}
