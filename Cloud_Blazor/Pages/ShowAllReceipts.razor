@page "/Receipts"

@inject HttpClient TestingRestAPI

<section class="bg-gray-100 min-h-screen py-8">
    <div class="max-w-4xl mx-auto">

        <h2 class="text-2xl font-semibold mb-4">Receipts</h2>

        @if (receipts != null && receipts.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach (var receipt in receipts)
                {
                    <div class="bg-white p-4 shadow-md rounded-md">
                        <h3 class="text-lg font-semibold mb-2">Receipt @receipt.Id</h3>
                        <p class="text-gray-700">Name: @receipt.Name</p>
                        <p class="text-gray-700">Company: @receipt.Company</p>
                        <button class="bg-red-500 text-white font-bold py-1 px-2 rounded mt-2" @onclick="() => DeleteReceipt(receipt.Id)">Delete</button>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-gray-700">No data available</p>
        }

    </div>
</section>

@code {
    private List<Receipt>? receipts;

    protected override async Task OnInitializedAsync()
    {
        await LoadReceipts();
    }

    private async Task LoadReceipts()
    {
        try
        {
            // Use GetFromJsonAsync to deserialize JSON into objects
            receipts = await TestingRestAPI.GetFromJsonAsync<List<Receipt>>("https://localhost:7029/api/Receipt");

            if (receipts == null || !receipts.Any())
            {
                receipts = null;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HttpRequestException: {ex.Message}");

            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task DeleteReceipt(int receiptId)
    {
        try
        {
            // Make a DELETE request to the API to delete the receipt
            var response = await TestingRestAPI.DeleteAsync($"https://localhost:7029/api/Receipt/{receiptId}");
            if (response.IsSuccessStatusCode)
            {
                // Reload the receipts after deletion
                await LoadReceipts();
            }
            else
            {
                // Handle error if needed
                Console.WriteLine($"Error deleting receipt. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}
